//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace Planner
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
    private global::Planner.Planner_XamlTypeInfo.XamlTypeInfoProvider _provider;

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::Planner.Planner_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::Planner.Planner_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace Planner.Planner_XamlTypeInfo
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[68];
            _typeNameTable[0] = "DataLab.Tools.StaticTools";
            _typeNameTable[1] = "Object";
            _typeNameTable[2] = "Int32[]";
            _typeNameTable[3] = "System.Array";
            _typeNameTable[4] = "Int32";
            _typeNameTable[5] = "String[]";
            _typeNameTable[6] = "String";
            _typeNameTable[7] = "Planner.Data.Converters.DateTimeFormatConverter";
            _typeNameTable[8] = "Planner.Data.Converters.RandomColorGenerator";
            _typeNameTable[9] = "Planner.Data.Converters.DaysListToStringConverter";
            _typeNameTable[10] = "Planner.Data.Converters.BoolToElementVisibility";
            _typeNameTable[11] = "Planner.PlannerMapControl";
            _typeNameTable[12] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[13] = "Planner.PlannerMapControl.MapControlMode";
            _typeNameTable[14] = "System.Enum";
            _typeNameTable[15] = "System.ValueType";
            _typeNameTable[16] = "Planner.PlannerMapControl.MOVEMENT_BY";
            _typeNameTable[17] = "Windows.Devices.Geolocation.BasicGeoposition";
            _typeNameTable[18] = "DataLab.Data.Planning.Activity";
            _typeNameTable[19] = "DataLab.Data.Planning.PlanningItem";
            _typeNameTable[20] = "Planner.Modules.NavigationPanel";
            _typeNameTable[21] = "Boolean";
            _typeNameTable[22] = "Planner.ActivitiesPage";
            _typeNameTable[23] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[24] = "DataLab.Storage.PlanningItemStorage";
            _typeNameTable[25] = "DataLab.Storage.Storage";
            _typeNameTable[26] = "DataLab.Storage.SettingsStorage";
            _typeNameTable[27] = "Planner.Data.Converters.BoolToStackPanelVisibility";
            _typeNameTable[28] = "Planner.AddActivity";
            _typeNameTable[29] = "Planner.AddDiaryPage";
            _typeNameTable[30] = "Planner.AddReflectionPage";
            _typeNameTable[31] = "Windows.UI.Xaml.Media.Imaging.SoftwareBitmapSource";
            _typeNameTable[32] = "Windows.Storage.StorageFile";
            _typeNameTable[33] = "Planner.AddToDoItemPage";
            _typeNameTable[34] = "DataLab.Data.Planning.ToDoItem";
            _typeNameTable[35] = "Planner.AddToDoSetPage";
            _typeNameTable[36] = "DataLab.Data.Planning.ToDoItemSet";
            _typeNameTable[37] = "Planner.DiariesPage";
            _typeNameTable[38] = "Planner.ExtendedSplash";
            _typeNameTable[39] = "Planner.Data.Converters.NameToOnlineStatusConverter";
            _typeNameTable[40] = "Planner.Data.Converters.FriendsStringListWithAppliedFilter";
            _typeNameTable[41] = "Planner.FriendsPage";
            _typeNameTable[42] = "DataLab.Storage.DynamicPlanningItemStorage";
            _typeNameTable[43] = "Planner.GrantPermissionsPage";
            _typeNameTable[44] = "System.Collections.ObjectModel.ObservableCollection`1<DataLab.Data.Users.Contracts.SelectPermission>";
            _typeNameTable[45] = "System.Collections.ObjectModel.Collection`1<DataLab.Data.Users.Contracts.SelectPermission>";
            _typeNameTable[46] = "DataLab.Data.Users.Contracts.SelectPermission";
            _typeNameTable[47] = "Planner.LoginPage";
            _typeNameTable[48] = "Planner.Data.Converters.StringListToOneStringConverter";
            _typeNameTable[49] = "Planner.MailPage";
            _typeNameTable[50] = "Planner.MainPage";
            _typeNameTable[51] = "Planner.Data.Converters.PhotoToPanelVisibility";
            _typeNameTable[52] = "Planner.Data.Converters.FeelingEnumToEmoticon";
            _typeNameTable[53] = "Planner.ReflectionsPage";
            _typeNameTable[54] = "Windows.Foundation.Point";
            _typeNameTable[55] = "Planner.RegistrationPage";
            _typeNameTable[56] = "Planner.SendMailPage";
            _typeNameTable[57] = "Planner.Data.Converters.UserNullStatusToBoolConverter";
            _typeNameTable[58] = "Planner.SettingsPage";
            _typeNameTable[59] = "Planner.ShowDiaryPage";
            _typeNameTable[60] = "DataLab.Data.Planning.Diary";
            _typeNameTable[61] = "Planner.Data.Converters.TimeToElementWidthConverter";
            _typeNameTable[62] = "Planner.Data.Converters.PlanningItemToInfoPanelConverter";
            _typeNameTable[63] = "Planner.Data.Converters.ItemTimeToMarginConverter";
            _typeNameTable[64] = "Planner.TimeFlowPage";
            _typeNameTable[65] = "Planner.Data.TimeFlowTools.TimeFlow";
            _typeNameTable[66] = "Planner.ToDoPage";
            _typeNameTable[67] = "Planner.UserPage";

            _typeTable = new global::System.Type[68];
            _typeTable[0] = typeof(global::DataLab.Tools.StaticTools);
            _typeTable[1] = typeof(global::System.Object);
            _typeTable[2] = typeof(global::System.Int32[]);
            _typeTable[3] = typeof(global::System.Array);
            _typeTable[4] = typeof(global::System.Int32);
            _typeTable[5] = typeof(global::System.String[]);
            _typeTable[6] = typeof(global::System.String);
            _typeTable[7] = typeof(global::Planner.Data.Converters.DateTimeFormatConverter);
            _typeTable[8] = typeof(global::Planner.Data.Converters.RandomColorGenerator);
            _typeTable[9] = typeof(global::Planner.Data.Converters.DaysListToStringConverter);
            _typeTable[10] = typeof(global::Planner.Data.Converters.BoolToElementVisibility);
            _typeTable[11] = typeof(global::Planner.PlannerMapControl);
            _typeTable[12] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[13] = typeof(global::Planner.PlannerMapControl.MapControlMode);
            _typeTable[14] = typeof(global::System.Enum);
            _typeTable[15] = typeof(global::System.ValueType);
            _typeTable[16] = typeof(global::Planner.PlannerMapControl.MOVEMENT_BY);
            _typeTable[17] = typeof(global::Windows.Devices.Geolocation.BasicGeoposition);
            _typeTable[18] = typeof(global::DataLab.Data.Planning.Activity);
            _typeTable[19] = typeof(global::DataLab.Data.Planning.PlanningItem);
            _typeTable[20] = typeof(global::Planner.Modules.NavigationPanel);
            _typeTable[21] = typeof(global::System.Boolean);
            _typeTable[22] = typeof(global::Planner.ActivitiesPage);
            _typeTable[23] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[24] = typeof(global::DataLab.Storage.PlanningItemStorage);
            _typeTable[25] = typeof(global::DataLab.Storage.Storage);
            _typeTable[26] = typeof(global::DataLab.Storage.SettingsStorage);
            _typeTable[27] = typeof(global::Planner.Data.Converters.BoolToStackPanelVisibility);
            _typeTable[28] = typeof(global::Planner.AddActivity);
            _typeTable[29] = typeof(global::Planner.AddDiaryPage);
            _typeTable[30] = typeof(global::Planner.AddReflectionPage);
            _typeTable[31] = typeof(global::Windows.UI.Xaml.Media.Imaging.SoftwareBitmapSource);
            _typeTable[32] = typeof(global::Windows.Storage.StorageFile);
            _typeTable[33] = typeof(global::Planner.AddToDoItemPage);
            _typeTable[34] = typeof(global::DataLab.Data.Planning.ToDoItem);
            _typeTable[35] = typeof(global::Planner.AddToDoSetPage);
            _typeTable[36] = typeof(global::DataLab.Data.Planning.ToDoItemSet);
            _typeTable[37] = typeof(global::Planner.DiariesPage);
            _typeTable[38] = typeof(global::Planner.ExtendedSplash);
            _typeTable[39] = typeof(global::Planner.Data.Converters.NameToOnlineStatusConverter);
            _typeTable[40] = typeof(global::Planner.Data.Converters.FriendsStringListWithAppliedFilter);
            _typeTable[41] = typeof(global::Planner.FriendsPage);
            _typeTable[42] = typeof(global::DataLab.Storage.DynamicPlanningItemStorage);
            _typeTable[43] = typeof(global::Planner.GrantPermissionsPage);
            _typeTable[44] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::DataLab.Data.Users.Contracts.SelectPermission>);
            _typeTable[45] = typeof(global::System.Collections.ObjectModel.Collection<global::DataLab.Data.Users.Contracts.SelectPermission>);
            _typeTable[46] = typeof(global::DataLab.Data.Users.Contracts.SelectPermission);
            _typeTable[47] = typeof(global::Planner.LoginPage);
            _typeTable[48] = typeof(global::Planner.Data.Converters.StringListToOneStringConverter);
            _typeTable[49] = typeof(global::Planner.MailPage);
            _typeTable[50] = typeof(global::Planner.MainPage);
            _typeTable[51] = typeof(global::Planner.Data.Converters.PhotoToPanelVisibility);
            _typeTable[52] = typeof(global::Planner.Data.Converters.FeelingEnumToEmoticon);
            _typeTable[53] = typeof(global::Planner.ReflectionsPage);
            _typeTable[54] = typeof(global::Windows.Foundation.Point);
            _typeTable[55] = typeof(global::Planner.RegistrationPage);
            _typeTable[56] = typeof(global::Planner.SendMailPage);
            _typeTable[57] = typeof(global::Planner.Data.Converters.UserNullStatusToBoolConverter);
            _typeTable[58] = typeof(global::Planner.SettingsPage);
            _typeTable[59] = typeof(global::Planner.ShowDiaryPage);
            _typeTable[60] = typeof(global::DataLab.Data.Planning.Diary);
            _typeTable[61] = typeof(global::Planner.Data.Converters.TimeToElementWidthConverter);
            _typeTable[62] = typeof(global::Planner.Data.Converters.PlanningItemToInfoPanelConverter);
            _typeTable[63] = typeof(global::Planner.Data.Converters.ItemTimeToMarginConverter);
            _typeTable[64] = typeof(global::Planner.TimeFlowPage);
            _typeTable[65] = typeof(global::Planner.Data.TimeFlowTools.TimeFlow);
            _typeTable[66] = typeof(global::Planner.ToDoPage);
            _typeTable[67] = typeof(global::Planner.UserPage);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_StaticTools() { return new global::DataLab.Tools.StaticTools(); }
        private object Activate_7_DateTimeFormatConverter() { return new global::Planner.Data.Converters.DateTimeFormatConverter(); }
        private object Activate_8_RandomColorGenerator() { return new global::Planner.Data.Converters.RandomColorGenerator(); }
        private object Activate_9_DaysListToStringConverter() { return new global::Planner.Data.Converters.DaysListToStringConverter(); }
        private object Activate_10_BoolToElementVisibility() { return new global::Planner.Data.Converters.BoolToElementVisibility(); }
        private object Activate_11_PlannerMapControl() { return new global::Planner.PlannerMapControl(); }
        private object Activate_20_NavigationPanel() { return new global::Planner.Modules.NavigationPanel(); }
        private object Activate_22_ActivitiesPage() { return new global::Planner.ActivitiesPage(); }
        private object Activate_24_PlanningItemStorage() { return new global::DataLab.Storage.PlanningItemStorage(); }
        private object Activate_26_SettingsStorage() { return new global::DataLab.Storage.SettingsStorage(); }
        private object Activate_27_BoolToStackPanelVisibility() { return new global::Planner.Data.Converters.BoolToStackPanelVisibility(); }
        private object Activate_28_AddActivity() { return new global::Planner.AddActivity(); }
        private object Activate_29_AddDiaryPage() { return new global::Planner.AddDiaryPage(); }
        private object Activate_30_AddReflectionPage() { return new global::Planner.AddReflectionPage(); }
        private object Activate_33_AddToDoItemPage() { return new global::Planner.AddToDoItemPage(); }
        private object Activate_35_AddToDoSetPage() { return new global::Planner.AddToDoSetPage(); }
        private object Activate_37_DiariesPage() { return new global::Planner.DiariesPage(); }
        private object Activate_38_ExtendedSplash() { return new global::Planner.ExtendedSplash(); }
        private object Activate_39_NameToOnlineStatusConverter() { return new global::Planner.Data.Converters.NameToOnlineStatusConverter(); }
        private object Activate_40_FriendsStringListWithAppliedFilter() { return new global::Planner.Data.Converters.FriendsStringListWithAppliedFilter(); }
        private object Activate_41_FriendsPage() { return new global::Planner.FriendsPage(); }
        private object Activate_43_GrantPermissionsPage() { return new global::Planner.GrantPermissionsPage(); }
        private object Activate_44_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::DataLab.Data.Users.Contracts.SelectPermission>(); }
        private object Activate_45_Collection() { return new global::System.Collections.ObjectModel.Collection<global::DataLab.Data.Users.Contracts.SelectPermission>(); }
        private object Activate_46_SelectPermission() { return new global::DataLab.Data.Users.Contracts.SelectPermission(); }
        private object Activate_47_LoginPage() { return new global::Planner.LoginPage(); }
        private object Activate_48_StringListToOneStringConverter() { return new global::Planner.Data.Converters.StringListToOneStringConverter(); }
        private object Activate_49_MailPage() { return new global::Planner.MailPage(); }
        private object Activate_50_MainPage() { return new global::Planner.MainPage(); }
        private object Activate_51_PhotoToPanelVisibility() { return new global::Planner.Data.Converters.PhotoToPanelVisibility(); }
        private object Activate_52_FeelingEnumToEmoticon() { return new global::Planner.Data.Converters.FeelingEnumToEmoticon(); }
        private object Activate_53_ReflectionsPage() { return new global::Planner.ReflectionsPage(); }
        private object Activate_55_RegistrationPage() { return new global::Planner.RegistrationPage(); }
        private object Activate_56_SendMailPage() { return new global::Planner.SendMailPage(); }
        private object Activate_57_UserNullStatusToBoolConverter() { return new global::Planner.Data.Converters.UserNullStatusToBoolConverter(); }
        private object Activate_58_SettingsPage() { return new global::Planner.SettingsPage(); }
        private object Activate_59_ShowDiaryPage() { return new global::Planner.ShowDiaryPage(); }
        private object Activate_61_TimeToElementWidthConverter() { return new global::Planner.Data.Converters.TimeToElementWidthConverter(); }
        private object Activate_62_PlanningItemToInfoPanelConverter() { return new global::Planner.Data.Converters.PlanningItemToInfoPanelConverter(); }
        private object Activate_63_ItemTimeToMarginConverter() { return new global::Planner.Data.Converters.ItemTimeToMarginConverter(); }
        private object Activate_64_TimeFlowPage() { return new global::Planner.TimeFlowPage(); }
        private object Activate_66_ToDoPage() { return new global::Planner.ToDoPage(); }
        private object Activate_67_UserPage() { return new global::Planner.UserPage(); }
        private void VectorAdd_44_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::DataLab.Data.Users.Contracts.SelectPermission>)instance;
            var newItem = (global::DataLab.Data.Users.Contracts.SelectPermission)item;
            collection.Add(newItem);
        }
        private void VectorAdd_45_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::DataLab.Data.Users.Contracts.SelectPermission>)instance;
            var newItem = (global::DataLab.Data.Users.Contracts.SelectPermission)item;
            collection.Add(newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::Planner.Planner_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::Planner.Planner_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  DataLab.Tools.StaticTools
                userType = new global::Planner.Planner_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_0_StaticTools;
                userType.AddMemberName("getIntArrayFrom0To100");
                userType.AddMemberName("getFontNames");
                xamlType = userType;
                break;

            case 1:   //  Object
                xamlType = new global::Planner.Planner_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Int32[]
                userType = new global::Planner.Planner_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Array"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 3:   //  System.Array
                userType = new global::Planner.Planner_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 4:   //  Int32
                xamlType = new global::Planner.Planner_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 5:   //  String[]
                userType = new global::Planner.Planner_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Array"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 6:   //  String
                xamlType = new global::Planner.Planner_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 7:   //  Planner.Data.Converters.DateTimeFormatConverter
                userType = new global::Planner.Planner_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_7_DateTimeFormatConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 8:   //  Planner.Data.Converters.RandomColorGenerator
                userType = new global::Planner.Planner_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_8_RandomColorGenerator;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 9:   //  Planner.Data.Converters.DaysListToStringConverter
                userType = new global::Planner.Planner_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_9_DaysListToStringConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 10:   //  Planner.Data.Converters.BoolToElementVisibility
                userType = new global::Planner.Planner_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_10_BoolToElementVisibility;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 11:   //  Planner.PlannerMapControl
                userType = new global::Planner.Planner_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_11_PlannerMapControl;
                userType.AddMemberName("Mode");
                userType.AddMemberName("MovementMode");
                userType.AddMemberName("obb");
                userType.AddMemberName("LastSelectedLocation");
                userType.AddMemberName("CurrentAddress");
                userType.AddMemberName("CurrentDestinationAddress");
                userType.AddMemberName("DestinationActivity");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 12:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::Planner.Planner_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 13:   //  Planner.PlannerMapControl.MapControlMode
                userType = new global::Planner.Planner_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("SEARCH_VIEW", global::Planner.PlannerMapControl.MapControlMode.SEARCH_VIEW);
                userType.AddEnumValue("OBSERVANT_VIEW", global::Planner.PlannerMapControl.MapControlMode.OBSERVANT_VIEW);
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 14:   //  System.Enum
                userType = new global::Planner.Planner_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 15:   //  System.ValueType
                userType = new global::Planner.Planner_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 16:   //  Planner.PlannerMapControl.MOVEMENT_BY
                userType = new global::Planner.Planner_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("FOOT", global::Planner.PlannerMapControl.MOVEMENT_BY.FOOT);
                userType.AddEnumValue("VEHICLE", global::Planner.PlannerMapControl.MOVEMENT_BY.VEHICLE);
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 17:   //  Windows.Devices.Geolocation.BasicGeoposition
                userType = new global::Planner.Planner_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 18:   //  DataLab.Data.Planning.Activity
                userType = new global::Planner.Planner_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("DataLab.Data.Planning.PlanningItem"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 19:   //  DataLab.Data.Planning.PlanningItem
                userType = new global::Planner.Planner_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 20:   //  Planner.Modules.NavigationPanel
                userType = new global::Planner.Planner_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_20_NavigationPanel;
                userType.AddMemberName("ActivitiesButtonEnabled");
                userType.AddMemberName("ReflectionsButtonEnabled");
                userType.AddMemberName("ToDoButtonEnabled");
                userType.AddMemberName("TimeFlowButtonEnabled");
                userType.AddMemberName("SettingsButtonEnabled");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 21:   //  Boolean
                xamlType = new global::Planner.Planner_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 22:   //  Planner.ActivitiesPage
                userType = new global::Planner.Planner_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_22_ActivitiesPage;
                userType.AddMemberName("Planning");
                userType.AddMemberName("Settings");
                userType.AddMemberName("obb");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 23:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::Planner.Planner_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 24:   //  DataLab.Storage.PlanningItemStorage
                userType = new global::Planner.Planner_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("DataLab.Storage.Storage"));
                userType.Activator = Activate_24_PlanningItemStorage;
                xamlType = userType;
                break;

            case 25:   //  DataLab.Storage.Storage
                userType = new global::Planner.Planner_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 26:   //  DataLab.Storage.SettingsStorage
                userType = new global::Planner.Planner_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("DataLab.Storage.Storage"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 27:   //  Planner.Data.Converters.BoolToStackPanelVisibility
                userType = new global::Planner.Planner_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_27_BoolToStackPanelVisibility;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 28:   //  Planner.AddActivity
                userType = new global::Planner.Planner_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_28_AddActivity;
                userType.AddMemberName("Planning");
                userType.AddMemberName("Settings");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 29:   //  Planner.AddDiaryPage
                userType = new global::Planner.Planner_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_29_AddDiaryPage;
                userType.AddMemberName("Planning");
                userType.AddMemberName("Settings");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 30:   //  Planner.AddReflectionPage
                userType = new global::Planner.Planner_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_30_AddReflectionPage;
                userType.AddMemberName("Poto");
                userType.AddMemberName("Photo");
                userType.AddMemberName("Planning");
                userType.AddMemberName("Settings");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 31:   //  Windows.UI.Xaml.Media.Imaging.SoftwareBitmapSource
                xamlType = new global::Planner.Planner_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 32:   //  Windows.Storage.StorageFile
                userType = new global::Planner.Planner_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 33:   //  Planner.AddToDoItemPage
                userType = new global::Planner.Planner_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_33_AddToDoItemPage;
                userType.AddMemberName("Planning");
                userType.AddMemberName("Settings");
                userType.AddMemberName("MultipleItems");
                userType.AddMemberName("CurrentTdi");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 34:   //  DataLab.Data.Planning.ToDoItem
                userType = new global::Planner.Planner_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("DataLab.Data.Planning.PlanningItem"));
                xamlType = userType;
                break;

            case 35:   //  Planner.AddToDoSetPage
                userType = new global::Planner.Planner_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_35_AddToDoSetPage;
                userType.AddMemberName("plan");
                userType.AddMemberName("Settings");
                userType.AddMemberName("tdiSet");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 36:   //  DataLab.Data.Planning.ToDoItemSet
                userType = new global::Planner.Planner_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("DataLab.Data.Planning.ToDoItem"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 37:   //  Planner.DiariesPage
                userType = new global::Planner.Planner_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_37_DiariesPage;
                userType.AddMemberName("plan");
                userType.AddMemberName("Settings");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 38:   //  Planner.ExtendedSplash
                userType = new global::Planner.Planner_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_38_ExtendedSplash;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 39:   //  Planner.Data.Converters.NameToOnlineStatusConverter
                userType = new global::Planner.Planner_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_39_NameToOnlineStatusConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 40:   //  Planner.Data.Converters.FriendsStringListWithAppliedFilter
                userType = new global::Planner.Planner_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_40_FriendsStringListWithAppliedFilter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 41:   //  Planner.FriendsPage
                userType = new global::Planner.Planner_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_41_FriendsPage;
                userType.AddMemberName("plan");
                userType.AddMemberName("Settings");
                userType.AddMemberName("Filter");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 42:   //  DataLab.Storage.DynamicPlanningItemStorage
                userType = new global::Planner.Planner_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("DataLab.Storage.PlanningItemStorage"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 43:   //  Planner.GrantPermissionsPage
                userType = new global::Planner.Planner_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_43_GrantPermissionsPage;
                userType.AddMemberName("plan");
                userType.AddMemberName("SelectedPermissions");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 44:   //  System.Collections.ObjectModel.ObservableCollection`1<DataLab.Data.Users.Contracts.SelectPermission>
                userType = new global::Planner.Planner_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<DataLab.Data.Users.Contracts.SelectPermission>"));
                userType.CollectionAdd = VectorAdd_44_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 45:   //  System.Collections.ObjectModel.Collection`1<DataLab.Data.Users.Contracts.SelectPermission>
                userType = new global::Planner.Planner_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_45_Collection;
                userType.CollectionAdd = VectorAdd_45_Collection;
                xamlType = userType;
                break;

            case 46:   //  DataLab.Data.Users.Contracts.SelectPermission
                userType = new global::Planner.Planner_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_46_SelectPermission;
                userType.AddMemberName("Name");
                userType.AddMemberName("CanRead");
                userType.AddMemberName("CanWrite");
                userType.AddMemberName("CanDelete");
                xamlType = userType;
                break;

            case 47:   //  Planner.LoginPage
                userType = new global::Planner.Planner_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_47_LoginPage;
                userType.AddMemberName("plan");
                userType.AddMemberName("Settings");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 48:   //  Planner.Data.Converters.StringListToOneStringConverter
                userType = new global::Planner.Planner_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_48_StringListToOneStringConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 49:   //  Planner.MailPage
                userType = new global::Planner.Planner_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_49_MailPage;
                userType.AddMemberName("plan");
                userType.AddMemberName("Settings");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 50:   //  Planner.MainPage
                userType = new global::Planner.Planner_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_50_MainPage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 51:   //  Planner.Data.Converters.PhotoToPanelVisibility
                userType = new global::Planner.Planner_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_51_PhotoToPanelVisibility;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 52:   //  Planner.Data.Converters.FeelingEnumToEmoticon
                userType = new global::Planner.Planner_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_52_FeelingEnumToEmoticon;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 53:   //  Planner.ReflectionsPage
                userType = new global::Planner.Planner_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_53_ReflectionsPage;
                userType.AddMemberName("plan");
                userType.AddMemberName("manipulationStartingPoint");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 54:   //  Windows.Foundation.Point
                xamlType = new global::Planner.Planner_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 55:   //  Planner.RegistrationPage
                userType = new global::Planner.Planner_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_55_RegistrationPage;
                userType.AddMemberName("plan");
                userType.AddMemberName("Settings");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 56:   //  Planner.SendMailPage
                userType = new global::Planner.Planner_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_56_SendMailPage;
                userType.AddMemberName("plan");
                userType.AddMemberName("Settings");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 57:   //  Planner.Data.Converters.UserNullStatusToBoolConverter
                userType = new global::Planner.Planner_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_57_UserNullStatusToBoolConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 58:   //  Planner.SettingsPage
                userType = new global::Planner.Planner_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_58_SettingsPage;
                userType.AddMemberName("plan");
                userType.AddMemberName("Settings");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 59:   //  Planner.ShowDiaryPage
                userType = new global::Planner.Planner_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_59_ShowDiaryPage;
                userType.AddMemberName("Journal");
                userType.AddMemberName("plan");
                userType.AddMemberName("Settings");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 60:   //  DataLab.Data.Planning.Diary
                userType = new global::Planner.Planner_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 61:   //  Planner.Data.Converters.TimeToElementWidthConverter
                userType = new global::Planner.Planner_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_61_TimeToElementWidthConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 62:   //  Planner.Data.Converters.PlanningItemToInfoPanelConverter
                userType = new global::Planner.Planner_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_62_PlanningItemToInfoPanelConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 63:   //  Planner.Data.Converters.ItemTimeToMarginConverter
                userType = new global::Planner.Planner_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_63_ItemTimeToMarginConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 64:   //  Planner.TimeFlowPage
                userType = new global::Planner.Planner_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_64_TimeFlowPage;
                userType.AddMemberName("Planning");
                userType.AddMemberName("Settings");
                userType.AddMemberName("MainTimeFlow");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 65:   //  Planner.Data.TimeFlowTools.TimeFlow
                userType = new global::Planner.Planner_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 66:   //  Planner.ToDoPage
                userType = new global::Planner.Planner_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_66_ToDoPage;
                userType.AddMemberName("Planning");
                userType.AddMemberName("Settings");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 67:   //  Planner.UserPage
                userType = new global::Planner.Planner_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_67_UserPage;
                userType.AddMemberName("plan");
                userType.AddMemberName("Settings");
                userType.SetIsLocalType();
                xamlType = userType;
                break;
            }
            return xamlType;
        }


        private object get_0_StaticTools_getIntArrayFrom0To100(object instance)
        {
            var that = (global::DataLab.Tools.StaticTools)instance;
            return that.getIntArrayFrom0To100;
        }
        private object get_1_StaticTools_getFontNames(object instance)
        {
            var that = (global::DataLab.Tools.StaticTools)instance;
            return that.getFontNames;
        }
        private object get_2_PlannerMapControl_Mode(object instance)
        {
            var that = (global::Planner.PlannerMapControl)instance;
            return that.Mode;
        }
        private void set_2_PlannerMapControl_Mode(object instance, object Value)
        {
            var that = (global::Planner.PlannerMapControl)instance;
            that.Mode = (global::Planner.PlannerMapControl.MapControlMode)Value;
        }
        private object get_3_PlannerMapControl_MovementMode(object instance)
        {
            var that = (global::Planner.PlannerMapControl)instance;
            return that.MovementMode;
        }
        private void set_3_PlannerMapControl_MovementMode(object instance, object Value)
        {
            var that = (global::Planner.PlannerMapControl)instance;
            that.MovementMode = (global::Planner.PlannerMapControl.MOVEMENT_BY)Value;
        }
        private object get_4_PlannerMapControl_obb(object instance)
        {
            var that = (global::Planner.PlannerMapControl)instance;
            return that.obb;
        }
        private void set_4_PlannerMapControl_obb(object instance, object Value)
        {
            var that = (global::Planner.PlannerMapControl)instance;
            that.obb = (global::System.Object)Value;
        }
        private object get_5_PlannerMapControl_LastSelectedLocation(object instance)
        {
            var that = (global::Planner.PlannerMapControl)instance;
            return that.LastSelectedLocation;
        }
        private void set_5_PlannerMapControl_LastSelectedLocation(object instance, object Value)
        {
            var that = (global::Planner.PlannerMapControl)instance;
            that.LastSelectedLocation = (global::Windows.Devices.Geolocation.BasicGeoposition)Value;
        }
        private object get_6_PlannerMapControl_CurrentAddress(object instance)
        {
            var that = (global::Planner.PlannerMapControl)instance;
            return that.CurrentAddress;
        }
        private void set_6_PlannerMapControl_CurrentAddress(object instance, object Value)
        {
            var that = (global::Planner.PlannerMapControl)instance;
            that.CurrentAddress = (global::System.String)Value;
        }
        private object get_7_PlannerMapControl_CurrentDestinationAddress(object instance)
        {
            var that = (global::Planner.PlannerMapControl)instance;
            return that.CurrentDestinationAddress;
        }
        private void set_7_PlannerMapControl_CurrentDestinationAddress(object instance, object Value)
        {
            var that = (global::Planner.PlannerMapControl)instance;
            that.CurrentDestinationAddress = (global::System.String)Value;
        }
        private object get_8_PlannerMapControl_DestinationActivity(object instance)
        {
            var that = (global::Planner.PlannerMapControl)instance;
            return that.DestinationActivity;
        }
        private void set_8_PlannerMapControl_DestinationActivity(object instance, object Value)
        {
            var that = (global::Planner.PlannerMapControl)instance;
            that.DestinationActivity = (global::DataLab.Data.Planning.Activity)Value;
        }
        private object get_9_NavigationPanel_ActivitiesButtonEnabled(object instance)
        {
            var that = (global::Planner.Modules.NavigationPanel)instance;
            return that.ActivitiesButtonEnabled;
        }
        private void set_9_NavigationPanel_ActivitiesButtonEnabled(object instance, object Value)
        {
            var that = (global::Planner.Modules.NavigationPanel)instance;
            that.ActivitiesButtonEnabled = (global::System.Boolean)Value;
        }
        private object get_10_NavigationPanel_ReflectionsButtonEnabled(object instance)
        {
            var that = (global::Planner.Modules.NavigationPanel)instance;
            return that.ReflectionsButtonEnabled;
        }
        private void set_10_NavigationPanel_ReflectionsButtonEnabled(object instance, object Value)
        {
            var that = (global::Planner.Modules.NavigationPanel)instance;
            that.ReflectionsButtonEnabled = (global::System.Boolean)Value;
        }
        private object get_11_NavigationPanel_ToDoButtonEnabled(object instance)
        {
            var that = (global::Planner.Modules.NavigationPanel)instance;
            return that.ToDoButtonEnabled;
        }
        private void set_11_NavigationPanel_ToDoButtonEnabled(object instance, object Value)
        {
            var that = (global::Planner.Modules.NavigationPanel)instance;
            that.ToDoButtonEnabled = (global::System.Boolean)Value;
        }
        private object get_12_NavigationPanel_TimeFlowButtonEnabled(object instance)
        {
            var that = (global::Planner.Modules.NavigationPanel)instance;
            return that.TimeFlowButtonEnabled;
        }
        private void set_12_NavigationPanel_TimeFlowButtonEnabled(object instance, object Value)
        {
            var that = (global::Planner.Modules.NavigationPanel)instance;
            that.TimeFlowButtonEnabled = (global::System.Boolean)Value;
        }
        private object get_13_NavigationPanel_SettingsButtonEnabled(object instance)
        {
            var that = (global::Planner.Modules.NavigationPanel)instance;
            return that.SettingsButtonEnabled;
        }
        private void set_13_NavigationPanel_SettingsButtonEnabled(object instance, object Value)
        {
            var that = (global::Planner.Modules.NavigationPanel)instance;
            that.SettingsButtonEnabled = (global::System.Boolean)Value;
        }
        private object get_14_ActivitiesPage_Planning(object instance)
        {
            var that = (global::Planner.ActivitiesPage)instance;
            return that.Planning;
        }
        private void set_14_ActivitiesPage_Planning(object instance, object Value)
        {
            var that = (global::Planner.ActivitiesPage)instance;
            that.Planning = (global::DataLab.Storage.PlanningItemStorage)Value;
        }
        private object get_15_ActivitiesPage_Settings(object instance)
        {
            var that = (global::Planner.ActivitiesPage)instance;
            return that.Settings;
        }
        private void set_15_ActivitiesPage_Settings(object instance, object Value)
        {
            var that = (global::Planner.ActivitiesPage)instance;
            that.Settings = (global::DataLab.Storage.SettingsStorage)Value;
        }
        private object get_16_ActivitiesPage_obb(object instance)
        {
            var that = (global::Planner.ActivitiesPage)instance;
            return that.obb;
        }
        private void set_16_ActivitiesPage_obb(object instance, object Value)
        {
            var that = (global::Planner.ActivitiesPage)instance;
            that.obb = (global::System.Object)Value;
        }
        private object get_17_AddActivity_Planning(object instance)
        {
            var that = (global::Planner.AddActivity)instance;
            return that.Planning;
        }
        private void set_17_AddActivity_Planning(object instance, object Value)
        {
            var that = (global::Planner.AddActivity)instance;
            that.Planning = (global::DataLab.Storage.PlanningItemStorage)Value;
        }
        private object get_18_AddActivity_Settings(object instance)
        {
            var that = (global::Planner.AddActivity)instance;
            return that.Settings;
        }
        private void set_18_AddActivity_Settings(object instance, object Value)
        {
            var that = (global::Planner.AddActivity)instance;
            that.Settings = (global::DataLab.Storage.SettingsStorage)Value;
        }
        private object get_19_AddDiaryPage_Planning(object instance)
        {
            var that = (global::Planner.AddDiaryPage)instance;
            return that.Planning;
        }
        private void set_19_AddDiaryPage_Planning(object instance, object Value)
        {
            var that = (global::Planner.AddDiaryPage)instance;
            that.Planning = (global::DataLab.Storage.PlanningItemStorage)Value;
        }
        private object get_20_AddDiaryPage_Settings(object instance)
        {
            var that = (global::Planner.AddDiaryPage)instance;
            return that.Settings;
        }
        private void set_20_AddDiaryPage_Settings(object instance, object Value)
        {
            var that = (global::Planner.AddDiaryPage)instance;
            that.Settings = (global::DataLab.Storage.SettingsStorage)Value;
        }
        private object get_21_AddReflectionPage_Poto(object instance)
        {
            var that = (global::Planner.AddReflectionPage)instance;
            return that.Poto;
        }
        private void set_21_AddReflectionPage_Poto(object instance, object Value)
        {
            var that = (global::Planner.AddReflectionPage)instance;
            that.Poto = (global::Windows.UI.Xaml.Media.Imaging.SoftwareBitmapSource)Value;
        }
        private object get_22_AddReflectionPage_Photo(object instance)
        {
            var that = (global::Planner.AddReflectionPage)instance;
            return that.Photo;
        }
        private void set_22_AddReflectionPage_Photo(object instance, object Value)
        {
            var that = (global::Planner.AddReflectionPage)instance;
            that.Photo = (global::Windows.Storage.StorageFile)Value;
        }
        private object get_23_AddReflectionPage_Planning(object instance)
        {
            var that = (global::Planner.AddReflectionPage)instance;
            return that.Planning;
        }
        private void set_23_AddReflectionPage_Planning(object instance, object Value)
        {
            var that = (global::Planner.AddReflectionPage)instance;
            that.Planning = (global::DataLab.Storage.PlanningItemStorage)Value;
        }
        private object get_24_AddReflectionPage_Settings(object instance)
        {
            var that = (global::Planner.AddReflectionPage)instance;
            return that.Settings;
        }
        private void set_24_AddReflectionPage_Settings(object instance, object Value)
        {
            var that = (global::Planner.AddReflectionPage)instance;
            that.Settings = (global::DataLab.Storage.SettingsStorage)Value;
        }
        private object get_25_AddToDoItemPage_Planning(object instance)
        {
            var that = (global::Planner.AddToDoItemPage)instance;
            return that.Planning;
        }
        private void set_25_AddToDoItemPage_Planning(object instance, object Value)
        {
            var that = (global::Planner.AddToDoItemPage)instance;
            that.Planning = (global::DataLab.Storage.PlanningItemStorage)Value;
        }
        private object get_26_AddToDoItemPage_Settings(object instance)
        {
            var that = (global::Planner.AddToDoItemPage)instance;
            return that.Settings;
        }
        private void set_26_AddToDoItemPage_Settings(object instance, object Value)
        {
            var that = (global::Planner.AddToDoItemPage)instance;
            that.Settings = (global::DataLab.Storage.SettingsStorage)Value;
        }
        private object get_27_AddToDoItemPage_MultipleItems(object instance)
        {
            var that = (global::Planner.AddToDoItemPage)instance;
            return that.MultipleItems;
        }
        private void set_27_AddToDoItemPage_MultipleItems(object instance, object Value)
        {
            var that = (global::Planner.AddToDoItemPage)instance;
            that.MultipleItems = (global::System.Boolean)Value;
        }
        private object get_28_AddToDoItemPage_CurrentTdi(object instance)
        {
            var that = (global::Planner.AddToDoItemPage)instance;
            return that.CurrentTdi;
        }
        private void set_28_AddToDoItemPage_CurrentTdi(object instance, object Value)
        {
            var that = (global::Planner.AddToDoItemPage)instance;
            that.CurrentTdi = (global::DataLab.Data.Planning.ToDoItem)Value;
        }
        private object get_29_AddToDoSetPage_plan(object instance)
        {
            var that = (global::Planner.AddToDoSetPage)instance;
            return that.plan;
        }
        private void set_29_AddToDoSetPage_plan(object instance, object Value)
        {
            var that = (global::Planner.AddToDoSetPage)instance;
            that.plan = (global::DataLab.Storage.PlanningItemStorage)Value;
        }
        private object get_30_AddToDoSetPage_Settings(object instance)
        {
            var that = (global::Planner.AddToDoSetPage)instance;
            return that.Settings;
        }
        private void set_30_AddToDoSetPage_Settings(object instance, object Value)
        {
            var that = (global::Planner.AddToDoSetPage)instance;
            that.Settings = (global::DataLab.Storage.SettingsStorage)Value;
        }
        private object get_31_AddToDoSetPage_tdiSet(object instance)
        {
            var that = (global::Planner.AddToDoSetPage)instance;
            return that.tdiSet;
        }
        private void set_31_AddToDoSetPage_tdiSet(object instance, object Value)
        {
            var that = (global::Planner.AddToDoSetPage)instance;
            that.tdiSet = (global::DataLab.Data.Planning.ToDoItemSet)Value;
        }
        private object get_32_DiariesPage_plan(object instance)
        {
            var that = (global::Planner.DiariesPage)instance;
            return that.plan;
        }
        private void set_32_DiariesPage_plan(object instance, object Value)
        {
            var that = (global::Planner.DiariesPage)instance;
            that.plan = (global::DataLab.Storage.PlanningItemStorage)Value;
        }
        private object get_33_DiariesPage_Settings(object instance)
        {
            var that = (global::Planner.DiariesPage)instance;
            return that.Settings;
        }
        private void set_33_DiariesPage_Settings(object instance, object Value)
        {
            var that = (global::Planner.DiariesPage)instance;
            that.Settings = (global::DataLab.Storage.SettingsStorage)Value;
        }
        private object get_34_FriendsPage_plan(object instance)
        {
            var that = (global::Planner.FriendsPage)instance;
            return that.plan;
        }
        private void set_34_FriendsPage_plan(object instance, object Value)
        {
            var that = (global::Planner.FriendsPage)instance;
            that.plan = (global::DataLab.Storage.DynamicPlanningItemStorage)Value;
        }
        private object get_35_FriendsPage_Settings(object instance)
        {
            var that = (global::Planner.FriendsPage)instance;
            return that.Settings;
        }
        private void set_35_FriendsPage_Settings(object instance, object Value)
        {
            var that = (global::Planner.FriendsPage)instance;
            that.Settings = (global::DataLab.Storage.SettingsStorage)Value;
        }
        private object get_36_FriendsPage_Filter(object instance)
        {
            var that = (global::Planner.FriendsPage)instance;
            return that.Filter;
        }
        private object get_37_GrantPermissionsPage_plan(object instance)
        {
            var that = (global::Planner.GrantPermissionsPage)instance;
            return that.plan;
        }
        private void set_37_GrantPermissionsPage_plan(object instance, object Value)
        {
            var that = (global::Planner.GrantPermissionsPage)instance;
            that.plan = (global::DataLab.Storage.PlanningItemStorage)Value;
        }
        private object get_38_GrantPermissionsPage_SelectedPermissions(object instance)
        {
            var that = (global::Planner.GrantPermissionsPage)instance;
            return that.SelectedPermissions;
        }
        private void set_38_GrantPermissionsPage_SelectedPermissions(object instance, object Value)
        {
            var that = (global::Planner.GrantPermissionsPage)instance;
            that.SelectedPermissions = (global::System.Collections.ObjectModel.ObservableCollection<global::DataLab.Data.Users.Contracts.SelectPermission>)Value;
        }
        private object get_39_SelectPermission_Name(object instance)
        {
            var that = (global::DataLab.Data.Users.Contracts.SelectPermission)instance;
            return that.Name;
        }
        private void set_39_SelectPermission_Name(object instance, object Value)
        {
            var that = (global::DataLab.Data.Users.Contracts.SelectPermission)instance;
            that.Name = (global::System.String)Value;
        }
        private object get_40_SelectPermission_CanRead(object instance)
        {
            var that = (global::DataLab.Data.Users.Contracts.SelectPermission)instance;
            return that.CanRead;
        }
        private void set_40_SelectPermission_CanRead(object instance, object Value)
        {
            var that = (global::DataLab.Data.Users.Contracts.SelectPermission)instance;
            that.CanRead = (global::System.Boolean)Value;
        }
        private object get_41_SelectPermission_CanWrite(object instance)
        {
            var that = (global::DataLab.Data.Users.Contracts.SelectPermission)instance;
            return that.CanWrite;
        }
        private void set_41_SelectPermission_CanWrite(object instance, object Value)
        {
            var that = (global::DataLab.Data.Users.Contracts.SelectPermission)instance;
            that.CanWrite = (global::System.Boolean)Value;
        }
        private object get_42_SelectPermission_CanDelete(object instance)
        {
            var that = (global::DataLab.Data.Users.Contracts.SelectPermission)instance;
            return that.CanDelete;
        }
        private void set_42_SelectPermission_CanDelete(object instance, object Value)
        {
            var that = (global::DataLab.Data.Users.Contracts.SelectPermission)instance;
            that.CanDelete = (global::System.Boolean)Value;
        }
        private object get_43_LoginPage_plan(object instance)
        {
            var that = (global::Planner.LoginPage)instance;
            return that.plan;
        }
        private void set_43_LoginPage_plan(object instance, object Value)
        {
            var that = (global::Planner.LoginPage)instance;
            that.plan = (global::DataLab.Storage.PlanningItemStorage)Value;
        }
        private object get_44_LoginPage_Settings(object instance)
        {
            var that = (global::Planner.LoginPage)instance;
            return that.Settings;
        }
        private void set_44_LoginPage_Settings(object instance, object Value)
        {
            var that = (global::Planner.LoginPage)instance;
            that.Settings = (global::DataLab.Storage.SettingsStorage)Value;
        }
        private object get_45_MailPage_plan(object instance)
        {
            var that = (global::Planner.MailPage)instance;
            return that.plan;
        }
        private void set_45_MailPage_plan(object instance, object Value)
        {
            var that = (global::Planner.MailPage)instance;
            that.plan = (global::DataLab.Storage.DynamicPlanningItemStorage)Value;
        }
        private object get_46_MailPage_Settings(object instance)
        {
            var that = (global::Planner.MailPage)instance;
            return that.Settings;
        }
        private void set_46_MailPage_Settings(object instance, object Value)
        {
            var that = (global::Planner.MailPage)instance;
            that.Settings = (global::DataLab.Storage.SettingsStorage)Value;
        }
        private object get_47_ReflectionsPage_plan(object instance)
        {
            var that = (global::Planner.ReflectionsPage)instance;
            return that.plan;
        }
        private void set_47_ReflectionsPage_plan(object instance, object Value)
        {
            var that = (global::Planner.ReflectionsPage)instance;
            that.plan = (global::DataLab.Storage.PlanningItemStorage)Value;
        }
        private object get_48_ReflectionsPage_manipulationStartingPoint(object instance)
        {
            var that = (global::Planner.ReflectionsPage)instance;
            return that.manipulationStartingPoint;
        }
        private void set_48_ReflectionsPage_manipulationStartingPoint(object instance, object Value)
        {
            var that = (global::Planner.ReflectionsPage)instance;
            that.manipulationStartingPoint = (global::Windows.Foundation.Point)Value;
        }
        private object get_49_RegistrationPage_plan(object instance)
        {
            var that = (global::Planner.RegistrationPage)instance;
            return that.plan;
        }
        private void set_49_RegistrationPage_plan(object instance, object Value)
        {
            var that = (global::Planner.RegistrationPage)instance;
            that.plan = (global::DataLab.Storage.PlanningItemStorage)Value;
        }
        private object get_50_RegistrationPage_Settings(object instance)
        {
            var that = (global::Planner.RegistrationPage)instance;
            return that.Settings;
        }
        private void set_50_RegistrationPage_Settings(object instance, object Value)
        {
            var that = (global::Planner.RegistrationPage)instance;
            that.Settings = (global::DataLab.Storage.SettingsStorage)Value;
        }
        private object get_51_SendMailPage_plan(object instance)
        {
            var that = (global::Planner.SendMailPage)instance;
            return that.plan;
        }
        private void set_51_SendMailPage_plan(object instance, object Value)
        {
            var that = (global::Planner.SendMailPage)instance;
            that.plan = (global::DataLab.Storage.DynamicPlanningItemStorage)Value;
        }
        private object get_52_SendMailPage_Settings(object instance)
        {
            var that = (global::Planner.SendMailPage)instance;
            return that.Settings;
        }
        private void set_52_SendMailPage_Settings(object instance, object Value)
        {
            var that = (global::Planner.SendMailPage)instance;
            that.Settings = (global::DataLab.Storage.SettingsStorage)Value;
        }
        private object get_53_SettingsPage_plan(object instance)
        {
            var that = (global::Planner.SettingsPage)instance;
            return that.plan;
        }
        private void set_53_SettingsPage_plan(object instance, object Value)
        {
            var that = (global::Planner.SettingsPage)instance;
            that.plan = (global::DataLab.Storage.PlanningItemStorage)Value;
        }
        private object get_54_SettingsPage_Settings(object instance)
        {
            var that = (global::Planner.SettingsPage)instance;
            return that.Settings;
        }
        private void set_54_SettingsPage_Settings(object instance, object Value)
        {
            var that = (global::Planner.SettingsPage)instance;
            that.Settings = (global::DataLab.Storage.SettingsStorage)Value;
        }
        private object get_55_ShowDiaryPage_Journal(object instance)
        {
            var that = (global::Planner.ShowDiaryPage)instance;
            return that.Journal;
        }
        private void set_55_ShowDiaryPage_Journal(object instance, object Value)
        {
            var that = (global::Planner.ShowDiaryPage)instance;
            that.Journal = (global::DataLab.Data.Planning.Diary)Value;
        }
        private object get_56_ShowDiaryPage_plan(object instance)
        {
            var that = (global::Planner.ShowDiaryPage)instance;
            return that.plan;
        }
        private void set_56_ShowDiaryPage_plan(object instance, object Value)
        {
            var that = (global::Planner.ShowDiaryPage)instance;
            that.plan = (global::DataLab.Storage.PlanningItemStorage)Value;
        }
        private object get_57_ShowDiaryPage_Settings(object instance)
        {
            var that = (global::Planner.ShowDiaryPage)instance;
            return that.Settings;
        }
        private void set_57_ShowDiaryPage_Settings(object instance, object Value)
        {
            var that = (global::Planner.ShowDiaryPage)instance;
            that.Settings = (global::DataLab.Storage.SettingsStorage)Value;
        }
        private object get_58_TimeFlowPage_Planning(object instance)
        {
            var that = (global::Planner.TimeFlowPage)instance;
            return that.Planning;
        }
        private void set_58_TimeFlowPage_Planning(object instance, object Value)
        {
            var that = (global::Planner.TimeFlowPage)instance;
            that.Planning = (global::DataLab.Storage.PlanningItemStorage)Value;
        }
        private object get_59_TimeFlowPage_Settings(object instance)
        {
            var that = (global::Planner.TimeFlowPage)instance;
            return that.Settings;
        }
        private void set_59_TimeFlowPage_Settings(object instance, object Value)
        {
            var that = (global::Planner.TimeFlowPage)instance;
            that.Settings = (global::DataLab.Storage.SettingsStorage)Value;
        }
        private object get_60_TimeFlowPage_MainTimeFlow(object instance)
        {
            var that = (global::Planner.TimeFlowPage)instance;
            return that.MainTimeFlow;
        }
        private void set_60_TimeFlowPage_MainTimeFlow(object instance, object Value)
        {
            var that = (global::Planner.TimeFlowPage)instance;
            that.MainTimeFlow = (global::Planner.Data.TimeFlowTools.TimeFlow)Value;
        }
        private object get_61_ToDoPage_Planning(object instance)
        {
            var that = (global::Planner.ToDoPage)instance;
            return that.Planning;
        }
        private object get_62_ToDoPage_Settings(object instance)
        {
            var that = (global::Planner.ToDoPage)instance;
            return that.Settings;
        }
        private object get_63_UserPage_plan(object instance)
        {
            var that = (global::Planner.UserPage)instance;
            return that.plan;
        }
        private void set_63_UserPage_plan(object instance, object Value)
        {
            var that = (global::Planner.UserPage)instance;
            that.plan = (global::DataLab.Storage.DynamicPlanningItemStorage)Value;
        }
        private object get_64_UserPage_Settings(object instance)
        {
            var that = (global::Planner.UserPage)instance;
            return that.Settings;
        }
        private void set_64_UserPage_Settings(object instance, object Value)
        {
            var that = (global::Planner.UserPage)instance;
            that.Settings = (global::DataLab.Storage.SettingsStorage)Value;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::Planner.Planner_XamlTypeInfo.XamlMember xamlMember = null;
            global::Planner.Planner_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "DataLab.Tools.StaticTools.getIntArrayFrom0To100":
                userType = (global::Planner.Planner_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DataLab.Tools.StaticTools");
                xamlMember = new global::Planner.Planner_XamlTypeInfo.XamlMember(this, "getIntArrayFrom0To100", "Int32[]");
                xamlMember.Getter = get_0_StaticTools_getIntArrayFrom0To100;
                xamlMember.SetIsReadOnly();
                break;
            case "DataLab.Tools.StaticTools.getFontNames":
                userType = (global::Planner.Planner_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DataLab.Tools.StaticTools");
                xamlMember = new global::Planner.Planner_XamlTypeInfo.XamlMember(this, "getFontNames", "String[]");
                xamlMember.Getter = get_1_StaticTools_getFontNames;
                xamlMember.SetIsReadOnly();
                break;
            case "Planner.PlannerMapControl.Mode":
                userType = (global::Planner.Planner_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Planner.PlannerMapControl");
                xamlMember = new global::Planner.Planner_XamlTypeInfo.XamlMember(this, "Mode", "Planner.PlannerMapControl.MapControlMode");
                xamlMember.Getter = get_2_PlannerMapControl_Mode;
                xamlMember.Setter = set_2_PlannerMapControl_Mode;
                break;
            case "Planner.PlannerMapControl.MovementMode":
                userType = (global::Planner.Planner_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Planner.PlannerMapControl");
                xamlMember = new global::Planner.Planner_XamlTypeInfo.XamlMember(this, "MovementMode", "Planner.PlannerMapControl.MOVEMENT_BY");
                xamlMember.Getter = get_3_PlannerMapControl_MovementMode;
                xamlMember.Setter = set_3_PlannerMapControl_MovementMode;
                break;
            case "Planner.PlannerMapControl.obb":
                userType = (global::Planner.Planner_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Planner.PlannerMapControl");
                xamlMember = new global::Planner.Planner_XamlTypeInfo.XamlMember(this, "obb", "Object");
                xamlMember.Getter = get_4_PlannerMapControl_obb;
                xamlMember.Setter = set_4_PlannerMapControl_obb;
                break;
            case "Planner.PlannerMapControl.LastSelectedLocation":
                userType = (global::Planner.Planner_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Planner.PlannerMapControl");
                xamlMember = new global::Planner.Planner_XamlTypeInfo.XamlMember(this, "LastSelectedLocation", "Windows.Devices.Geolocation.BasicGeoposition");
                xamlMember.Getter = get_5_PlannerMapControl_LastSelectedLocation;
                xamlMember.Setter = set_5_PlannerMapControl_LastSelectedLocation;
                break;
            case "Planner.PlannerMapControl.CurrentAddress":
                userType = (global::Planner.Planner_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Planner.PlannerMapControl");
                xamlMember = new global::Planner.Planner_XamlTypeInfo.XamlMember(this, "CurrentAddress", "String");
                xamlMember.Getter = get_6_PlannerMapControl_CurrentAddress;
                xamlMember.Setter = set_6_PlannerMapControl_CurrentAddress;
                break;
            case "Planner.PlannerMapControl.CurrentDestinationAddress":
                userType = (global::Planner.Planner_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Planner.PlannerMapControl");
                xamlMember = new global::Planner.Planner_XamlTypeInfo.XamlMember(this, "CurrentDestinationAddress", "String");
                xamlMember.Getter = get_7_PlannerMapControl_CurrentDestinationAddress;
                xamlMember.Setter = set_7_PlannerMapControl_CurrentDestinationAddress;
                break;
            case "Planner.PlannerMapControl.DestinationActivity":
                userType = (global::Planner.Planner_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Planner.PlannerMapControl");
                xamlMember = new global::Planner.Planner_XamlTypeInfo.XamlMember(this, "DestinationActivity", "DataLab.Data.Planning.Activity");
                xamlMember.Getter = get_8_PlannerMapControl_DestinationActivity;
                xamlMember.Setter = set_8_PlannerMapControl_DestinationActivity;
                break;
            case "Planner.Modules.NavigationPanel.ActivitiesButtonEnabled":
                userType = (global::Planner.Planner_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Planner.Modules.NavigationPanel");
                xamlMember = new global::Planner.Planner_XamlTypeInfo.XamlMember(this, "ActivitiesButtonEnabled", "Boolean");
                xamlMember.Getter = get_9_NavigationPanel_ActivitiesButtonEnabled;
                xamlMember.Setter = set_9_NavigationPanel_ActivitiesButtonEnabled;
                break;
            case "Planner.Modules.NavigationPanel.ReflectionsButtonEnabled":
                userType = (global::Planner.Planner_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Planner.Modules.NavigationPanel");
                xamlMember = new global::Planner.Planner_XamlTypeInfo.XamlMember(this, "ReflectionsButtonEnabled", "Boolean");
                xamlMember.Getter = get_10_NavigationPanel_ReflectionsButtonEnabled;
                xamlMember.Setter = set_10_NavigationPanel_ReflectionsButtonEnabled;
                break;
            case "Planner.Modules.NavigationPanel.ToDoButtonEnabled":
                userType = (global::Planner.Planner_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Planner.Modules.NavigationPanel");
                xamlMember = new global::Planner.Planner_XamlTypeInfo.XamlMember(this, "ToDoButtonEnabled", "Boolean");
                xamlMember.Getter = get_11_NavigationPanel_ToDoButtonEnabled;
                xamlMember.Setter = set_11_NavigationPanel_ToDoButtonEnabled;
                break;
            case "Planner.Modules.NavigationPanel.TimeFlowButtonEnabled":
                userType = (global::Planner.Planner_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Planner.Modules.NavigationPanel");
                xamlMember = new global::Planner.Planner_XamlTypeInfo.XamlMember(this, "TimeFlowButtonEnabled", "Boolean");
                xamlMember.Getter = get_12_NavigationPanel_TimeFlowButtonEnabled;
                xamlMember.Setter = set_12_NavigationPanel_TimeFlowButtonEnabled;
                break;
            case "Planner.Modules.NavigationPanel.SettingsButtonEnabled":
                userType = (global::Planner.Planner_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Planner.Modules.NavigationPanel");
                xamlMember = new global::Planner.Planner_XamlTypeInfo.XamlMember(this, "SettingsButtonEnabled", "Boolean");
                xamlMember.Getter = get_13_NavigationPanel_SettingsButtonEnabled;
                xamlMember.Setter = set_13_NavigationPanel_SettingsButtonEnabled;
                break;
            case "Planner.ActivitiesPage.Planning":
                userType = (global::Planner.Planner_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Planner.ActivitiesPage");
                xamlMember = new global::Planner.Planner_XamlTypeInfo.XamlMember(this, "Planning", "DataLab.Storage.PlanningItemStorage");
                xamlMember.Getter = get_14_ActivitiesPage_Planning;
                xamlMember.Setter = set_14_ActivitiesPage_Planning;
                break;
            case "Planner.ActivitiesPage.Settings":
                userType = (global::Planner.Planner_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Planner.ActivitiesPage");
                xamlMember = new global::Planner.Planner_XamlTypeInfo.XamlMember(this, "Settings", "DataLab.Storage.SettingsStorage");
                xamlMember.Getter = get_15_ActivitiesPage_Settings;
                xamlMember.Setter = set_15_ActivitiesPage_Settings;
                break;
            case "Planner.ActivitiesPage.obb":
                userType = (global::Planner.Planner_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Planner.ActivitiesPage");
                xamlMember = new global::Planner.Planner_XamlTypeInfo.XamlMember(this, "obb", "Object");
                xamlMember.Getter = get_16_ActivitiesPage_obb;
                xamlMember.Setter = set_16_ActivitiesPage_obb;
                break;
            case "Planner.AddActivity.Planning":
                userType = (global::Planner.Planner_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Planner.AddActivity");
                xamlMember = new global::Planner.Planner_XamlTypeInfo.XamlMember(this, "Planning", "DataLab.Storage.PlanningItemStorage");
                xamlMember.Getter = get_17_AddActivity_Planning;
                xamlMember.Setter = set_17_AddActivity_Planning;
                break;
            case "Planner.AddActivity.Settings":
                userType = (global::Planner.Planner_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Planner.AddActivity");
                xamlMember = new global::Planner.Planner_XamlTypeInfo.XamlMember(this, "Settings", "DataLab.Storage.SettingsStorage");
                xamlMember.Getter = get_18_AddActivity_Settings;
                xamlMember.Setter = set_18_AddActivity_Settings;
                break;
            case "Planner.AddDiaryPage.Planning":
                userType = (global::Planner.Planner_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Planner.AddDiaryPage");
                xamlMember = new global::Planner.Planner_XamlTypeInfo.XamlMember(this, "Planning", "DataLab.Storage.PlanningItemStorage");
                xamlMember.Getter = get_19_AddDiaryPage_Planning;
                xamlMember.Setter = set_19_AddDiaryPage_Planning;
                break;
            case "Planner.AddDiaryPage.Settings":
                userType = (global::Planner.Planner_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Planner.AddDiaryPage");
                xamlMember = new global::Planner.Planner_XamlTypeInfo.XamlMember(this, "Settings", "DataLab.Storage.SettingsStorage");
                xamlMember.Getter = get_20_AddDiaryPage_Settings;
                xamlMember.Setter = set_20_AddDiaryPage_Settings;
                break;
            case "Planner.AddReflectionPage.Poto":
                userType = (global::Planner.Planner_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Planner.AddReflectionPage");
                xamlMember = new global::Planner.Planner_XamlTypeInfo.XamlMember(this, "Poto", "Windows.UI.Xaml.Media.Imaging.SoftwareBitmapSource");
                xamlMember.Getter = get_21_AddReflectionPage_Poto;
                xamlMember.Setter = set_21_AddReflectionPage_Poto;
                break;
            case "Planner.AddReflectionPage.Photo":
                userType = (global::Planner.Planner_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Planner.AddReflectionPage");
                xamlMember = new global::Planner.Planner_XamlTypeInfo.XamlMember(this, "Photo", "Windows.Storage.StorageFile");
                xamlMember.Getter = get_22_AddReflectionPage_Photo;
                xamlMember.Setter = set_22_AddReflectionPage_Photo;
                break;
            case "Planner.AddReflectionPage.Planning":
                userType = (global::Planner.Planner_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Planner.AddReflectionPage");
                xamlMember = new global::Planner.Planner_XamlTypeInfo.XamlMember(this, "Planning", "DataLab.Storage.PlanningItemStorage");
                xamlMember.Getter = get_23_AddReflectionPage_Planning;
                xamlMember.Setter = set_23_AddReflectionPage_Planning;
                break;
            case "Planner.AddReflectionPage.Settings":
                userType = (global::Planner.Planner_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Planner.AddReflectionPage");
                xamlMember = new global::Planner.Planner_XamlTypeInfo.XamlMember(this, "Settings", "DataLab.Storage.SettingsStorage");
                xamlMember.Getter = get_24_AddReflectionPage_Settings;
                xamlMember.Setter = set_24_AddReflectionPage_Settings;
                break;
            case "Planner.AddToDoItemPage.Planning":
                userType = (global::Planner.Planner_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Planner.AddToDoItemPage");
                xamlMember = new global::Planner.Planner_XamlTypeInfo.XamlMember(this, "Planning", "DataLab.Storage.PlanningItemStorage");
                xamlMember.Getter = get_25_AddToDoItemPage_Planning;
                xamlMember.Setter = set_25_AddToDoItemPage_Planning;
                break;
            case "Planner.AddToDoItemPage.Settings":
                userType = (global::Planner.Planner_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Planner.AddToDoItemPage");
                xamlMember = new global::Planner.Planner_XamlTypeInfo.XamlMember(this, "Settings", "DataLab.Storage.SettingsStorage");
                xamlMember.Getter = get_26_AddToDoItemPage_Settings;
                xamlMember.Setter = set_26_AddToDoItemPage_Settings;
                break;
            case "Planner.AddToDoItemPage.MultipleItems":
                userType = (global::Planner.Planner_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Planner.AddToDoItemPage");
                xamlMember = new global::Planner.Planner_XamlTypeInfo.XamlMember(this, "MultipleItems", "Boolean");
                xamlMember.Getter = get_27_AddToDoItemPage_MultipleItems;
                xamlMember.Setter = set_27_AddToDoItemPage_MultipleItems;
                break;
            case "Planner.AddToDoItemPage.CurrentTdi":
                userType = (global::Planner.Planner_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Planner.AddToDoItemPage");
                xamlMember = new global::Planner.Planner_XamlTypeInfo.XamlMember(this, "CurrentTdi", "DataLab.Data.Planning.ToDoItem");
                xamlMember.Getter = get_28_AddToDoItemPage_CurrentTdi;
                xamlMember.Setter = set_28_AddToDoItemPage_CurrentTdi;
                break;
            case "Planner.AddToDoSetPage.plan":
                userType = (global::Planner.Planner_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Planner.AddToDoSetPage");
                xamlMember = new global::Planner.Planner_XamlTypeInfo.XamlMember(this, "plan", "DataLab.Storage.PlanningItemStorage");
                xamlMember.Getter = get_29_AddToDoSetPage_plan;
                xamlMember.Setter = set_29_AddToDoSetPage_plan;
                break;
            case "Planner.AddToDoSetPage.Settings":
                userType = (global::Planner.Planner_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Planner.AddToDoSetPage");
                xamlMember = new global::Planner.Planner_XamlTypeInfo.XamlMember(this, "Settings", "DataLab.Storage.SettingsStorage");
                xamlMember.Getter = get_30_AddToDoSetPage_Settings;
                xamlMember.Setter = set_30_AddToDoSetPage_Settings;
                break;
            case "Planner.AddToDoSetPage.tdiSet":
                userType = (global::Planner.Planner_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Planner.AddToDoSetPage");
                xamlMember = new global::Planner.Planner_XamlTypeInfo.XamlMember(this, "tdiSet", "DataLab.Data.Planning.ToDoItemSet");
                xamlMember.Getter = get_31_AddToDoSetPage_tdiSet;
                xamlMember.Setter = set_31_AddToDoSetPage_tdiSet;
                break;
            case "Planner.DiariesPage.plan":
                userType = (global::Planner.Planner_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Planner.DiariesPage");
                xamlMember = new global::Planner.Planner_XamlTypeInfo.XamlMember(this, "plan", "DataLab.Storage.PlanningItemStorage");
                xamlMember.Getter = get_32_DiariesPage_plan;
                xamlMember.Setter = set_32_DiariesPage_plan;
                break;
            case "Planner.DiariesPage.Settings":
                userType = (global::Planner.Planner_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Planner.DiariesPage");
                xamlMember = new global::Planner.Planner_XamlTypeInfo.XamlMember(this, "Settings", "DataLab.Storage.SettingsStorage");
                xamlMember.Getter = get_33_DiariesPage_Settings;
                xamlMember.Setter = set_33_DiariesPage_Settings;
                break;
            case "Planner.FriendsPage.plan":
                userType = (global::Planner.Planner_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Planner.FriendsPage");
                xamlMember = new global::Planner.Planner_XamlTypeInfo.XamlMember(this, "plan", "DataLab.Storage.DynamicPlanningItemStorage");
                xamlMember.Getter = get_34_FriendsPage_plan;
                xamlMember.Setter = set_34_FriendsPage_plan;
                break;
            case "Planner.FriendsPage.Settings":
                userType = (global::Planner.Planner_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Planner.FriendsPage");
                xamlMember = new global::Planner.Planner_XamlTypeInfo.XamlMember(this, "Settings", "DataLab.Storage.SettingsStorage");
                xamlMember.Getter = get_35_FriendsPage_Settings;
                xamlMember.Setter = set_35_FriendsPage_Settings;
                break;
            case "Planner.FriendsPage.Filter":
                userType = (global::Planner.Planner_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Planner.FriendsPage");
                xamlMember = new global::Planner.Planner_XamlTypeInfo.XamlMember(this, "Filter", "String");
                xamlMember.Getter = get_36_FriendsPage_Filter;
                xamlMember.SetIsReadOnly();
                break;
            case "Planner.GrantPermissionsPage.plan":
                userType = (global::Planner.Planner_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Planner.GrantPermissionsPage");
                xamlMember = new global::Planner.Planner_XamlTypeInfo.XamlMember(this, "plan", "DataLab.Storage.PlanningItemStorage");
                xamlMember.Getter = get_37_GrantPermissionsPage_plan;
                xamlMember.Setter = set_37_GrantPermissionsPage_plan;
                break;
            case "Planner.GrantPermissionsPage.SelectedPermissions":
                userType = (global::Planner.Planner_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Planner.GrantPermissionsPage");
                xamlMember = new global::Planner.Planner_XamlTypeInfo.XamlMember(this, "SelectedPermissions", "System.Collections.ObjectModel.ObservableCollection`1<DataLab.Data.Users.Contracts.SelectPermission>");
                xamlMember.Getter = get_38_GrantPermissionsPage_SelectedPermissions;
                xamlMember.Setter = set_38_GrantPermissionsPage_SelectedPermissions;
                break;
            case "DataLab.Data.Users.Contracts.SelectPermission.Name":
                userType = (global::Planner.Planner_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DataLab.Data.Users.Contracts.SelectPermission");
                xamlMember = new global::Planner.Planner_XamlTypeInfo.XamlMember(this, "Name", "String");
                xamlMember.Getter = get_39_SelectPermission_Name;
                xamlMember.Setter = set_39_SelectPermission_Name;
                break;
            case "DataLab.Data.Users.Contracts.SelectPermission.CanRead":
                userType = (global::Planner.Planner_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DataLab.Data.Users.Contracts.SelectPermission");
                xamlMember = new global::Planner.Planner_XamlTypeInfo.XamlMember(this, "CanRead", "Boolean");
                xamlMember.Getter = get_40_SelectPermission_CanRead;
                xamlMember.Setter = set_40_SelectPermission_CanRead;
                break;
            case "DataLab.Data.Users.Contracts.SelectPermission.CanWrite":
                userType = (global::Planner.Planner_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DataLab.Data.Users.Contracts.SelectPermission");
                xamlMember = new global::Planner.Planner_XamlTypeInfo.XamlMember(this, "CanWrite", "Boolean");
                xamlMember.Getter = get_41_SelectPermission_CanWrite;
                xamlMember.Setter = set_41_SelectPermission_CanWrite;
                break;
            case "DataLab.Data.Users.Contracts.SelectPermission.CanDelete":
                userType = (global::Planner.Planner_XamlTypeInfo.XamlUserType)GetXamlTypeByName("DataLab.Data.Users.Contracts.SelectPermission");
                xamlMember = new global::Planner.Planner_XamlTypeInfo.XamlMember(this, "CanDelete", "Boolean");
                xamlMember.Getter = get_42_SelectPermission_CanDelete;
                xamlMember.Setter = set_42_SelectPermission_CanDelete;
                break;
            case "Planner.LoginPage.plan":
                userType = (global::Planner.Planner_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Planner.LoginPage");
                xamlMember = new global::Planner.Planner_XamlTypeInfo.XamlMember(this, "plan", "DataLab.Storage.PlanningItemStorage");
                xamlMember.Getter = get_43_LoginPage_plan;
                xamlMember.Setter = set_43_LoginPage_plan;
                break;
            case "Planner.LoginPage.Settings":
                userType = (global::Planner.Planner_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Planner.LoginPage");
                xamlMember = new global::Planner.Planner_XamlTypeInfo.XamlMember(this, "Settings", "DataLab.Storage.SettingsStorage");
                xamlMember.Getter = get_44_LoginPage_Settings;
                xamlMember.Setter = set_44_LoginPage_Settings;
                break;
            case "Planner.MailPage.plan":
                userType = (global::Planner.Planner_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Planner.MailPage");
                xamlMember = new global::Planner.Planner_XamlTypeInfo.XamlMember(this, "plan", "DataLab.Storage.DynamicPlanningItemStorage");
                xamlMember.Getter = get_45_MailPage_plan;
                xamlMember.Setter = set_45_MailPage_plan;
                break;
            case "Planner.MailPage.Settings":
                userType = (global::Planner.Planner_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Planner.MailPage");
                xamlMember = new global::Planner.Planner_XamlTypeInfo.XamlMember(this, "Settings", "DataLab.Storage.SettingsStorage");
                xamlMember.Getter = get_46_MailPage_Settings;
                xamlMember.Setter = set_46_MailPage_Settings;
                break;
            case "Planner.ReflectionsPage.plan":
                userType = (global::Planner.Planner_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Planner.ReflectionsPage");
                xamlMember = new global::Planner.Planner_XamlTypeInfo.XamlMember(this, "plan", "DataLab.Storage.PlanningItemStorage");
                xamlMember.Getter = get_47_ReflectionsPage_plan;
                xamlMember.Setter = set_47_ReflectionsPage_plan;
                break;
            case "Planner.ReflectionsPage.manipulationStartingPoint":
                userType = (global::Planner.Planner_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Planner.ReflectionsPage");
                xamlMember = new global::Planner.Planner_XamlTypeInfo.XamlMember(this, "manipulationStartingPoint", "Windows.Foundation.Point");
                xamlMember.Getter = get_48_ReflectionsPage_manipulationStartingPoint;
                xamlMember.Setter = set_48_ReflectionsPage_manipulationStartingPoint;
                break;
            case "Planner.RegistrationPage.plan":
                userType = (global::Planner.Planner_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Planner.RegistrationPage");
                xamlMember = new global::Planner.Planner_XamlTypeInfo.XamlMember(this, "plan", "DataLab.Storage.PlanningItemStorage");
                xamlMember.Getter = get_49_RegistrationPage_plan;
                xamlMember.Setter = set_49_RegistrationPage_plan;
                break;
            case "Planner.RegistrationPage.Settings":
                userType = (global::Planner.Planner_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Planner.RegistrationPage");
                xamlMember = new global::Planner.Planner_XamlTypeInfo.XamlMember(this, "Settings", "DataLab.Storage.SettingsStorage");
                xamlMember.Getter = get_50_RegistrationPage_Settings;
                xamlMember.Setter = set_50_RegistrationPage_Settings;
                break;
            case "Planner.SendMailPage.plan":
                userType = (global::Planner.Planner_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Planner.SendMailPage");
                xamlMember = new global::Planner.Planner_XamlTypeInfo.XamlMember(this, "plan", "DataLab.Storage.DynamicPlanningItemStorage");
                xamlMember.Getter = get_51_SendMailPage_plan;
                xamlMember.Setter = set_51_SendMailPage_plan;
                break;
            case "Planner.SendMailPage.Settings":
                userType = (global::Planner.Planner_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Planner.SendMailPage");
                xamlMember = new global::Planner.Planner_XamlTypeInfo.XamlMember(this, "Settings", "DataLab.Storage.SettingsStorage");
                xamlMember.Getter = get_52_SendMailPage_Settings;
                xamlMember.Setter = set_52_SendMailPage_Settings;
                break;
            case "Planner.SettingsPage.plan":
                userType = (global::Planner.Planner_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Planner.SettingsPage");
                xamlMember = new global::Planner.Planner_XamlTypeInfo.XamlMember(this, "plan", "DataLab.Storage.PlanningItemStorage");
                xamlMember.Getter = get_53_SettingsPage_plan;
                xamlMember.Setter = set_53_SettingsPage_plan;
                break;
            case "Planner.SettingsPage.Settings":
                userType = (global::Planner.Planner_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Planner.SettingsPage");
                xamlMember = new global::Planner.Planner_XamlTypeInfo.XamlMember(this, "Settings", "DataLab.Storage.SettingsStorage");
                xamlMember.Getter = get_54_SettingsPage_Settings;
                xamlMember.Setter = set_54_SettingsPage_Settings;
                break;
            case "Planner.ShowDiaryPage.Journal":
                userType = (global::Planner.Planner_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Planner.ShowDiaryPage");
                xamlMember = new global::Planner.Planner_XamlTypeInfo.XamlMember(this, "Journal", "DataLab.Data.Planning.Diary");
                xamlMember.Getter = get_55_ShowDiaryPage_Journal;
                xamlMember.Setter = set_55_ShowDiaryPage_Journal;
                break;
            case "Planner.ShowDiaryPage.plan":
                userType = (global::Planner.Planner_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Planner.ShowDiaryPage");
                xamlMember = new global::Planner.Planner_XamlTypeInfo.XamlMember(this, "plan", "DataLab.Storage.PlanningItemStorage");
                xamlMember.Getter = get_56_ShowDiaryPage_plan;
                xamlMember.Setter = set_56_ShowDiaryPage_plan;
                break;
            case "Planner.ShowDiaryPage.Settings":
                userType = (global::Planner.Planner_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Planner.ShowDiaryPage");
                xamlMember = new global::Planner.Planner_XamlTypeInfo.XamlMember(this, "Settings", "DataLab.Storage.SettingsStorage");
                xamlMember.Getter = get_57_ShowDiaryPage_Settings;
                xamlMember.Setter = set_57_ShowDiaryPage_Settings;
                break;
            case "Planner.TimeFlowPage.Planning":
                userType = (global::Planner.Planner_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Planner.TimeFlowPage");
                xamlMember = new global::Planner.Planner_XamlTypeInfo.XamlMember(this, "Planning", "DataLab.Storage.PlanningItemStorage");
                xamlMember.Getter = get_58_TimeFlowPage_Planning;
                xamlMember.Setter = set_58_TimeFlowPage_Planning;
                break;
            case "Planner.TimeFlowPage.Settings":
                userType = (global::Planner.Planner_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Planner.TimeFlowPage");
                xamlMember = new global::Planner.Planner_XamlTypeInfo.XamlMember(this, "Settings", "DataLab.Storage.SettingsStorage");
                xamlMember.Getter = get_59_TimeFlowPage_Settings;
                xamlMember.Setter = set_59_TimeFlowPage_Settings;
                break;
            case "Planner.TimeFlowPage.MainTimeFlow":
                userType = (global::Planner.Planner_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Planner.TimeFlowPage");
                xamlMember = new global::Planner.Planner_XamlTypeInfo.XamlMember(this, "MainTimeFlow", "Planner.Data.TimeFlowTools.TimeFlow");
                xamlMember.Getter = get_60_TimeFlowPage_MainTimeFlow;
                xamlMember.Setter = set_60_TimeFlowPage_MainTimeFlow;
                break;
            case "Planner.ToDoPage.Planning":
                userType = (global::Planner.Planner_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Planner.ToDoPage");
                xamlMember = new global::Planner.Planner_XamlTypeInfo.XamlMember(this, "Planning", "DataLab.Storage.PlanningItemStorage");
                xamlMember.Getter = get_61_ToDoPage_Planning;
                xamlMember.SetIsReadOnly();
                break;
            case "Planner.ToDoPage.Settings":
                userType = (global::Planner.Planner_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Planner.ToDoPage");
                xamlMember = new global::Planner.Planner_XamlTypeInfo.XamlMember(this, "Settings", "DataLab.Storage.SettingsStorage");
                xamlMember.Getter = get_62_ToDoPage_Settings;
                xamlMember.SetIsReadOnly();
                break;
            case "Planner.UserPage.plan":
                userType = (global::Planner.Planner_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Planner.UserPage");
                xamlMember = new global::Planner.Planner_XamlTypeInfo.XamlMember(this, "plan", "DataLab.Storage.DynamicPlanningItemStorage");
                xamlMember.Getter = get_63_UserPage_plan;
                xamlMember.Setter = set_63_UserPage_plan;
                break;
            case "Planner.UserPage.Settings":
                userType = (global::Planner.Planner_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Planner.UserPage");
                xamlMember = new global::Planner.Planner_XamlTypeInfo.XamlMember(this, "Settings", "DataLab.Storage.SettingsStorage");
                xamlMember.Getter = get_64_UserPage_Settings;
                xamlMember.Setter = set_64_UserPage_Settings;
                break;
            }
            return xamlMember;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);
    internal delegate object CreateFromStringMethod(string args);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::Planner.Planner_XamlTypeInfo.XamlSystemBaseType
    {
        global::Planner.Planner_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::Planner.Planner_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (CreateFromStringMethod != null)
            {
                return this.CreateFromStringMethod(input);
            }
            else if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }
        public CreateFromStringMethod CreateFromStringMethod {get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::Planner.Planner_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::Planner.Planner_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}

